{"version":3,"sources":["node_modules/browser-pack/_prelude.js","client/js/main.bundle.ts","client/js/modules/albums.ts","client/js/modules/controls.ts","client/js/modules/tooltips.ts","client/js/services/analytics.ts","client/js/services/imgur.ts","client/js/utils/copy.ts","client/js/utils/dom.ts","client/js/utils/functions.ts","client/js/utils/http.ts","client/js/utils/objects.ts","client/js/utils/strings.ts","client/js/utils/window.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { initAlbums } from 'modules/albums';\nimport { initTooltips } from 'modules/tooltips';\nimport { initControls, setSources } from 'modules/controls';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  initAlbums();\n  initTooltips();\n  initControls();\n\n  let urlMatch = window.location.pathname.match(/\\/a\\/([a-zA-Z0-9]*),([a-zA-Z0-9]*)/);\n  if(urlMatch && urlMatch[1] && urlMatch[2]) {\n    let source1 = urlMatch[1];\n    let source2 = urlMatch[2];\n\n    setSources([source1, source2]);\n  }\n});","import { createElement } from 'utils/dom';\nimport { diff, shared } from 'utils/strings';\nimport { smoothScroll } from 'utils/window';\nimport { debounce } from 'utils/functions';\nimport analytics, { EventActions, EventCategories, EventLabels, Dimensions } from 'services/analytics';\n\ntype Image = {\n  src: string,\n  desc: string,\n  label: string,\n}\ntype Album = {\n  id: string,\n  title: string,\n  images: Array<{\n    title: string,\n    link: string,\n    description: string\n  }>\n}\n\nlet albumsContainer: HTMLElement = null;\nlet currentIndex = -1;\nlet currentTargetPair: HTMLElement = null;\nlet albumCount = 0;\nlet pairEls: Array<HTMLElement> = [];\nlet scrollLock = false;\nlet scrollTimer = null;\n\nconst KeyCodes = {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n};\n\nexport function initAlbums() {\n  albumsContainer = <HTMLElement> document.querySelector('#albums');\n\n  albumsContainer.addEventListener('change', (e) => {\n    let val = e.target.value;\n    let i = parseInt(e.target.dataset['i']);\n    showImage(i, val);\n  });\n\n  window.addEventListener('keydown', (e) => {\n    //noinspection TypeScriptUnresolvedFunction\n    let doCareAbout = Object.values(KeyCodes).indexOf(e.keyCode) > -1;\n    if(doCareAbout) {\n      if(e.keyCode == KeyCodes.DOWN) {\n        nextPair();\n      }\n      if(e.keyCode == KeyCodes.UP) {\n        prevPair();\n      }\n      if(e.keyCode == KeyCodes.RIGHT) {\n        nextImage();\n      }\n      if(e.keyCode == KeyCodes.LEFT) {\n        prevImage();\n      }\n    }\n  });\n\n  window.addEventListener('scroll', debouncedAdjustScroll);\n}\n\nfunction adjustCurrentFromScroll(e) {\n  if(scrollLock) return;\n\n  let top = window.scrollY;\n  let pairElTops = pairEls.map(e => e.offsetTop);\n  for(let i = 0; i < pairElTops.length; i++) {\n    let next = pairElTops[i + 1];\n    if(next && top + 200 < next) {\n      if(currentTargetPair) {\n        currentTargetPair.classList.remove('is-focused');\n      }\n      currentIndex = i;\n      let target = pairEls[i];\n      target.classList.add('is-focused');\n      currentTargetPair = target;\n      break;\n    }\n  }\n}\n\nlet debouncedAdjustScroll = debounce(adjustCurrentFromScroll, 500);\n\nfunction nextPair() {\n  currentIndex ++;\n  if(currentIndex >= albumCount) {\n    currentIndex = 0;\n  }\n  scrollToPair(currentIndex);\n}\nfunction prevPair() {\n  currentIndex --;\n  if(currentIndex < 0) {\n    currentIndex = albumCount - 1;\n  }\n  scrollToPair(currentIndex);\n}\n\nfunction scrollToPair(i: number) {\n  if(scrollLock) {\n    return;\n  }\n  if(currentTargetPair) {\n    currentTargetPair.classList.remove('is-focused');\n  }\n  let target = pairEls[i];\n  target.classList.add('is-focused');\n  currentTargetPair = target;\n  window.removeEventListener('scroll', debouncedAdjustScroll);\n  let duration = smoothScroll(target);\n  clearTimeout(scrollTimer);\n  scrollLock = true;\n  scrollTimer = setTimeout(() => {\n    scrollLock = false;\n    window.addEventListener('scroll', debouncedAdjustScroll);\n  }, duration + 1);\n}\n\nfunction showImage(i: number, val: string) {\n  let target = <HTMLElement> albumsContainer.querySelector(`[data-i=\"${i}\"]`);\n  target.dataset['show'] = val;\n}\n\nfunction nextImage() {\n  let target = albumsContainer.querySelector(`[data-i=\"${currentIndex}\"]`);\n  let vals = Array.prototype.slice.call(target.querySelectorAll('.src-toggle'), 0);\n  let i = vals.findIndex(v => !!v.checked);\n  i++;\n  if(i > vals.length - 1) {\n    i = 0;\n  }\n  let val = vals[i].value;\n  vals[i].checked = true;\n  showImage(currentIndex, val);\n}\n\nfunction prevImage() {\n  let target = albumsContainer.querySelector(`[data-i=\"${currentIndex}\"]`);\n  let vals = Array.prototype.slice.call(target.querySelectorAll('.src-toggle'), 0);\n  let i = vals.findIndex(v => !!v.checked);\n  i--;\n  if(i < 0) {\n    i = vals.length - 1;\n  }\n  let val = vals[i].value;\n  vals[i].checked = true;\n  showImage(currentIndex, val);\n}\n\nexport function renderAlbums(album1: Album, album2: Album) {\n  analytics.trackEvent({\n    action: EventActions.UPDATE,\n    category: EventCategories.VIEWER,\n    label: EventLabels.ALBUM_SOURCES,\n    dimensions: {\n      [Dimensions.SOURCES]: [album1.id, album2.id].join(','),\n      [Dimensions.SOURCE_ONE]: album1.id,\n      [Dimensions.SOURCE_TWO]: album2.id,\n    }\n  });\n  \n  let count = Math.max(album1.images.length, album2.images.length);\n  let labels = diff(album1.title, album2.title);\n  pairEls = [];\n  albumsContainer.innerHTML = '';\n\n  albumCount = count;\n \n  for(let i = 0; i < count; i++) {\n    let i1 = album1.images[i];\n    let i2 = album2.images[i];\n    let rawTitle = shared(i1.title, i2.title);\n    let title = `#${i + 1}${rawTitle ? ` - ${rawTitle}` : ''}`;\n\n    let el = renderImagePair(i, title, {\n      src: i1.link,\n      desc: i1.description,\n      label: labels[0]\n    }, {\n      src: i2.link,\n      desc: i2.description,\n      label: labels[1]\n    });\n    pairEls.push(el);\n  }\n\n  currentIndex = 0;\n  currentTargetPair = pairEls[0];\n  currentTargetPair.classList.add('is-focused');\n}\n\nfunction renderImagePair(i: number, title: string, i1: Image, i2: Image) {\n  let imagePairElement = createElement(`\n    <div class=\"image-pair\" data-i=\"${i}\" data-show=\"a\">\n      <div class=\"image-pair__controls\">\n        <span class=\"pair-id\">${title}</span>\n        <fieldset class=\"src-toggle-container\">\n          <span>\n            <input class=\"src-toggle\" type=\"radio\" id=\"${i}a\" name=\"pair-${i}\" data-i=\"${i}\" value=\"a\" checked />\n            <label for=\"${i}a\">${i1.label || 'A'}</label>\n          </span>\n          <span>\n            <input class=\"src-toggle\" type=\"radio\" id=\"${i}b\" name=\"pair-${i}\" data-i=\"${i}\" value=\"b\" />\n            <label for=\"${i}b\">${i2.label || 'B'}</label>\n          </span>\n        </fieldset>\n      </div>\n      <div class=\"image-pair__sources\">\n        <div class=\"image\" data-id=\"a\">\n          <div class=\"image-pair__src-wrapper\">\n            <img class=\"image__src\" src=\"${i1.src}\" />\n          </div>\n          <div class=\"image__desc\">\n            <p>${i1.desc || (i2.desc ? `<span class=\"assumed-desc\">[${i2.desc}]</span>` : '')}</p>\n          </div>\n        </div>\n        <div class=\"image\" data-id=\"b\">\n          <div class=\"image-pair__src-wrapper\">\n            <img class=\"image__src\" src=\"${i2.src}\" />\n          </div>\n          <div class=\"image__desc\">\n            <p>${i2.desc || (i1.desc ? `<span class=\"assumed-desc\">[${i1.desc}]</span>` : '')}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  `);\n  albumsContainer.appendChild(imagePairElement);\n  return <HTMLElement> imagePairElement\n}","import imgur from 'services/imgur';\nimport { renderAlbums } from 'modules/albums';\nimport { copyTextToClipboard } from 'utils/copy';\nimport { show, hide } from 'modules/tooltips';\nimport analytics, { EventActions, EventCategories, EventLabels, Dimensions } from 'services/analytics';\n\nlet updateButton = <HTMLButtonElement> document.querySelector('#submit');\nlet shareButton = <HTMLButtonElement> document.querySelector('#share');\nlet sourceForm = <HTMLFormElement> document.querySelector('#sourceForm');\nlet source1Input = <HTMLInputElement> document.querySelector('#source1');\nlet source2Input = <HTMLInputElement> document.querySelector('#source2');\n\nfunction onInputChange() {\n  let val1 = source1Input.value;\n  let val2 = source2Input.value;\n\n  if(val1 && val2) {\n    updateButton.disabled = false;\n  } else {\n    updateButton.disabled = true;\n  }\n}\n\nfunction update(values) {\n  let val1 = values[0];\n  let val2 = values[1];\n\n  shareButton.disabled = false;\n\n  imgur.requestAlbumImages([\n      val1, val2,\n    ])\n    .then(albums => {\n      if(albums[0] && albums[1]) {\n        renderAlbums(albums[0], albums[1]);\n\n        window.history.replaceState({\n          html: null,\n          pageTitle: 'contrast.li',\n        }, '', `/a/${albums[0].id},${albums[1].id}`);\n      } else {\n        window['Raven'].captureMessage(`Invalid album IDS: ${val1}, ${val2}`)\n      }\n    });\n\n  onInputChange();\n}\n\nexport function setSources(sources) {\n  let source1 = sources[0];\n  let source2 = sources[1];\n\n  source1Input.value = source1;\n  source2Input.value = source2;\n\n  update([source1, source2]);\n}\n\nexport function initControls() {\n  source1Input.addEventListener('keydown', onInputChange);\n  source2Input.addEventListener('keydown', onInputChange);\n\n  sourceForm.addEventListener('submit', (e) => {\n    e.preventDefault();\n    if(updateButton.disabled) return;\n\n    let val1 = source1Input.value;\n    let val2 = source2Input.value;\n\n    analytics.trackEvent({\n      action: EventActions.CLICK,\n      category: EventCategories.CONTROLS,\n      label: EventLabels.UPDATE_BUTTON,\n      dimensions: {\n        [Dimensions.SOURCES]: [val1, val2].join(','),\n        [Dimensions.SOURCE_ONE]: val1,\n        [Dimensions.SOURCE_TWO]: val2,\n      }\n    });\n\n    update([val1, val2]);\n  });\n\n  shareButton.addEventListener('click', (e: MouseEvent) => {\n    let copied = copyTextToClipboard(window.location.href);\n    if(copied) {\n      show('URL copied to clipboard!', shareButton);\n    } else {\n      show(`Couldn't copy.`, shareButton);\n    }\n  });\n}","let tooltip: HTMLElement = null;\nlet isHovered = false;\nlet hideTimer = null;\n\nexport function show(content: string, anchor: HTMLElement) {\n  let top = anchor.offsetTop;\n  let left = anchor.offsetLeft;\n  let height = anchor.offsetHeight;\n\n  tooltip.innerHTML = content;\n  tooltip.style.display = `block`;\n  tooltip.style.left = `${left}px`;\n  tooltip.style.top = `${top + height}px`;\n}\n\nexport function hide() {\n  tooltip.innerHTML = '';\n  tooltip.style.display = 'none';\n}\n\nexport function initTooltips() {\n  tooltip = <HTMLElement> document.querySelector('#tooltip');\n\n  let triggers = Array.prototype.slice.call(document.querySelectorAll('[data-tooltip]'), 0);\n  triggers.forEach(target => {\n    target.addEventListener('mouseenter', (e: MouseEvent) => {\n      clearTimeout(hideTimer);\n      let tooltipTemplate = target.dataset['tooltip'];\n      if(tooltipTemplate) {\n        let selector = `[data-template=\"${tooltipTemplate}\"]`;\n        let template = document.querySelector(selector);\n        show(template.innerHTML, target);\n      }\n    });\n    target.addEventListener('mouseleave', (e: MouseEvent) => {\n      clearTimeout(hideTimer);\n      if(!isHovered) {\n        hideTimer = setTimeout(hide, 300);\n      }\n    });\n  });\n\n  tooltip.addEventListener('mouseenter', (e) => {\n    clearTimeout(hideTimer);\n    isHovered = true;\n  });\n  tooltip.addEventListener('mouseleave', (e) => {\n    clearTimeout(hideTimer);\n    isHovered = false;\n    hideTimer = setTimeout(hide, 300);\n  });\n}","const Pages = {\n  INDEX: '/',\n};\n\nconst EventCategories = {\n  CONTROLS: 'controls',\n  VIEWER: 'viewer',\n};\n\nconst EventActions = {\n  CLICK: 'click',\n  HOVER: 'hover',\n  SELECTED: 'selected',\n  UPDATE: 'update'\n};\n\nconst EventLabels = {\n  SOURCE_INPUT: 'source-input',\n  SOURCE_TOOLTIP: 'source-tooltip',\n  UPDATE_BUTTON: 'update-button',\n  SHARE_BUTTON: 'share-button',\n  ALBUM_SOURCES: 'album-sources',\n};\n\nconst Dimensions = {\n  SOURCES: 'dimension0',\n  SOURCE_ONE: 'dimension1',\n  SOURCE_TWO: 'dimension2',\n};\n\nexport {\n  Pages,\n  EventCategories,\n  EventActions,\n  EventLabels,\n  Dimensions\n}\n\nexport default {\n\n  /**\n   * Tracks a page view.\n   *\n   * @param {string} path - The path of the current URL. Prefixed with '/'\n   */\n  trackPageView(path) {\n    window['ga']('send', {\n      hitType: 'pageview',\n      page: path\n    });\n  },\n\n  /**\n   * Tracks an event or interaction on the page.\n   *\n   * @param {string} category - The type of thing interacted with. (eg. Video)\n   * @param {string} action - The type of interaction. (eg. play)\n   * @param {string?} label - Typically a subcategory.\n   * @param {number?} value - A useful and unique identification of the thing interacted with.\n   * @param {Object<string, *>?} dimensions - A key-value map of dimension parameters.\n   */\n  trackEvent({ category, action, label, value, dimensions }: { category, action, label?, value?, dimensions? }) {\n    let event = Object.assign({\n      hitType: 'event'\n    }, {\n      eventCategory: category,\n      eventAction: action,\n      eventLabel: label,\n      eventValue: value\n    }, dimensions);\n    window['ga']('send', event);\n  }\n}","import http, { HttpResponse }  from 'utils/http';\n\nfunction parseId(string: string) {\n  let m = string.match(/a\\/(.*)/);\n  return m && m[1] ? m[1] : string;\n}\n\nfunction requestAlbumImages(sources) {\n  let ids: Array<string> = sources.map(s => parseId(s));\n  let requests: Array<Promise<HttpResponse>> = ids.map((id: string) => {\n    return http.get(`/album/${id}`, {});\n  });\n\n  return Promise.all(requests)\n    .then((responses) => {\n      return responses.map((res: HttpResponse) => {\n        if(res.status == 200) {\n          return JSON.parse(res.body).data;\n        } else {\n          return {\n            title: null,\n            images: []\n          };\n        }\n      });\n    })\n}\n\nexport default {\n  requestAlbumImages\n}","export function copyTextToClipboard(text) {\n  let textArea = document.createElement(\"textarea\");\n  let success = false;\n\n  textArea.style.position = 'fixed';\n  textArea.style.top = 0;\n  textArea.style.left = 0;\n  textArea.style.width = '2em';\n  textArea.style.height = '2em';\n  textArea.style.padding = 0;\n  textArea.style.border = 'none';\n  textArea.style.outline = 'none';\n  textArea.style.boxShadow = 'none';\n  textArea.style.background = 'transparent';\n  textArea.value = text;\n  document.body.appendChild(textArea);\n  textArea.select();\n\n  try {\n    success = document.execCommand('copy');\n  } catch (err) {\n    console.log('Unable to copy string', err);\n    success = false;\n  }\n\n  document.body.removeChild(textArea);\n\n  return success;\n}","/**\n * Creates a DOM element from an HTML string.\n *\n * @param {string} html The HTML string to render.\n * @returns {Element} The DOM element constructed.\n */\nfunction createElement(html) {\n    let wrapper = document.createElement('div');\n    wrapper.innerHTML = html;\n    return wrapper.firstElementChild;\n}\n\n/**\n * Finds all elements matching the given selector, within the given root element.\n *\n * @param {Element=document} root The root element to search under.\n * @param {string|Array.<string>} selectors The selectors to query for. If an array,\n * all results are flattened.\n * @returns {Array.<Element>}\n */\nfunction findAll(root, selectors) {\n    if(arguments.length == 1) {\n        selectors = root;\n        root = document.documentElement || document.body;\n    }\n\n    if(!Array.isArray(selectors)) {\n        selectors = [selectors]\n    }\n\n    // Grab elements from all selectors.\n    selectors = selectors.map(selector => {\n        return Array.prototype.slice.call(\n            root.querySelectorAll(selector), 0)\n    });\n\n    // Flatten the elements from all of the selectors.\n    return selectors.reduce((all, single) => {\n        return all.concat(single)\n    }, [])\n}\n\n/**\n * Finds a single elemnt matching the given selector, within the given root element.\n *\n * @param {Element=document} root The root element to search under.\n * @param {string} selector The selector to query for.\n * @returns {Element}\n */\nfunction findOne(root, selector) {\n    if(arguments.length == 1) {\n        selector = root;\n        root = document.documentElement || document.body;\n    }\n    return root.querySelector(selector);\n}\n\nexport {\n    findOne,\n    findAll,\n    createElement\n};","/**\n * Wraps a function so that it is only executed after a specified delay.\n *\n * @param {Function} fn The function to execute.\n * @param {number} delay The delay before teh function is executed.\n * @returns {Function} wrapper function\n */\nexport function debounce(fn, delay) {\n  let timeoutId = null;\n  return function() {\n    let args = arguments;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn.apply(null, args), delay);\n  }\n}\n\n/**\n * Wraps a function so that it's throttled to not executed more than once every\n * so often.\n *\n * @param {Function} fn The function to execute.\n * @param {number} threshold The delay before the function is executed.\n * @returns {Function} wrapper function\n */\nexport function throttle(fn, threshold) {\n  let last = null;\n  let deferTimer = null;\n\n  return function() {\n    let args = arguments;\n    let now = +new Date;\n\n    if(last && now < last + threshold) {\n      clearTimeout(deferTimer);\n\n      deferTimer = setTimeout(() => {\n        last = now;\n        fn.apply(null, args);\n      }, threshold);\n    } else {\n      last = now;\n      fn.apply(null, args);\n    }\n  }\n}","import { mix } from './objects';\n\nexport type HttpResponse = {\n    status: number,\n    body: string\n}\nexport type HttpOptions = {\n    method?: string,\n    url?: string,\n    params?: Object,\n    data?: Object,\n    headers?: Object\n}\n\n/**\n * Execute an AJAX request.\n *\n * @param {string} method The HTTP method to use.\n * @param {string} url The URL to send teh request to.\n * @param {object=} params Key-value paris of query string parameters.\n * @param {*=} data The request body.\n * @param {headers=} headers Any headers to set.\n * @returns {Promise}\n */\ninterface IHttp {\n    (HttpOptions): Promise<HttpResponse>\n    get(url: string, config?: HttpOptions): Promise<HttpResponse>\n}\n\nlet http = <IHttp>function({ method, url, params, data, headers }) {\n    return new Promise((resolve, reject) => {\n        let client = new XMLHttpRequest();\n        let uri = url;\n\n        if(params) {\n            let queryString = '';\n            for(let key in params) {\n                if(!params.hasOwnProperty(key)) continue;\n                let symbol = queryString ? '&' : '?';\n                let s = `${symbol}${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`;\n                queryString += s;\n            }\n            uri += queryString;\n        }\n\n        client.open(method, uri);\n\n        if(headers) {\n            for(let key in headers) {\n                if(headers.hasOwnProperty(key)) {\n                    let value = headers[key];\n                    client.setRequestHeader(key, value);\n                }\n            }\n        }\n\n        if(data && (method == 'POST' || method == 'PUT' || method == 'PATCH')) {\n            client.send(data);\n        } else {\n            client.send();\n        }\n\n        client.onload = function() {\n            if(this.status >= 200 && this.status < 300) {\n                resolve({\n                    status: this.status,\n                    body: this.response\n                });\n            } else {\n                reject({\n                    status: this.status,\n                    body: this.response\n                });\n            }\n        };\n\n        client.onerror = function() {\n            reject({\n                status: this.status,\n                body: this.response\n            })\n        };\n    })\n};\n\n/**\n * Executes a GET request to the specified location.\n *\n * @param {string} url The URL to send the request to.\n * @param {object=} config The full configuration options.\n * @returns {Promise}\n */\nhttp['get'] = (url, config = {}) => http(mix({\n    url,\n    method: 'GET'\n}, config));\n\n/**\n * Executes a POST request to the specified location.\n *\n * @param {string} url The URL to send the request to.\n * @param {*=} data The request body.\n * @param {object=} config The full configuration options.\n * @returns {Promise}\n */\nhttp['post'] = (url, data, config = {}) => http(mix({\n    url,\n    data,\n    method: 'POST'\n}, config));\n\n/**\n * Executes a PATCH request to the specified location.\n *\n * @param {string} url The URL to send the request to.\n * @param {*=} data The request body.\n * @param {object=} config The full configuration options.\n * @returns {Promise}\n */\nhttp['patch'] = (url, data, config = {}) => http(mix({\n    url,\n    data,\n    method: 'PATCH'\n}, config));\n\nexport default http;","function extend(src, ...objects) {\n    for(let i in objects) {\n        if(!objects.hasOwnProperty(i)) continue;\n        let obj = objects[i];\n        for(let key in obj) {\n            if(!obj.hasOwnProperty(key)) continue;\n            if(obj[key] && typeof obj[key] == 'object' && obj[key].constructor == Object) {\n                src[key] = mix({}, obj[key]);\n            } else {\n                src[key] = obj[key];\n            }\n        }\n    }\n    return src;\n}\n\nfunction mix(src, ...objects) {\n    let copy = extend({}, src);\n    return extend(copy, ...objects);\n}\n\nfunction retrieve(source, path) {\n    if (path.indexOf('.') < 0) {\n        return source[path];\n    } else {\n        let parts = path.split('.');\n        return retrieve(source[parts[0]], parts.slice(1).join('.'));\n    }\n}\n\nfunction assign(source, path, data) {\n    if (path.indexOf('.') < 0) {\n        source[path] = data;\n    } else {\n        let parts = path.split('.');\n        return assign(source[parts[0]], parts.slice(1).join('.'), data);\n    }\n}\n\nfunction pathsFor(path) {\n    return path\n      .split('.')\n      .map((part, i, paths) => paths.slice(0, i + 1).join('.'));\n}\n\nfunction crawl(source, callback, path = null) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            let value = source[key];\n            let valuePath = path ? [path, key].join('.') : key;\n            callback(valuePath, value);\n            if (typeof value === 'object') {\n                crawl(value, callback, valuePath);\n            }\n        }\n    }\n}\n\nexport { extend, mix, retrieve, assign, pathsFor, crawl };","/**\n * Removes the given length of a string. If len is negative, will remove from the end.\n *\n * @param {string} str The string to slice\n * @param {number} len The length to remove.\n * @returns {string}\n */\nfunction remove(str: string, len: number) {\n  return len > 0 ? str.substring(len) : str.substring(0, str.length + len);\n}\n\n/**\n * Returns the length of matching characters in the given string, up to the length provided.\n *\n * @param {number} len The max length to count to. Should be the smallest length of all strings.\n * @param {Array<string>} strings The strings to check.\n * @returns {number}\n */\nfunction fromStartLen(len: number, ...strings: Array<string>) {\n  for(let i = 0; i < len; i++) {\n    let last = null;\n    for(let s = 0; s < strings.length; s++) {\n      let c = strings[s][i];\n      if(last !== null && c != last) {\n        return i;\n      }\n      last = c;\n    }\n  }\n  return 0;\n}\n\n/**\n * Returns the length of matching characters in the given string, counting from the end.\n *\n * @param {number} len The max length to count to. Should be the smallest length of all strings.\n * @param {Array<string>} strings The strings to check.\n * @returns {number}\n */\nfunction fromEndLen(len: number, ...strings: Array<string>) {\n  for(let i = 0; i < len; i++) {\n    let last = null;\n    for(let s = 0; s < strings.length; s++) {\n      let si = strings[s].length - i - 1;\n      let c = strings[s][si];\n      if(last !== null && c != last) {\n        return i;\n      }\n      last = c;\n    }\n  }\n}\n\n/**\n * Returns the longest non-matching sequence of characters in the string.\n *\n * @param {Array<string>} strings The list of strings to diff.\n * @returns {Array<string>}\n */\nexport function diff(...strings: Array<string>) {\n  let len = Math.min.apply(null, strings.map(s => s.length));\n  let fromStart = 0;\n  let fromEnd = 0;\n\n  fromStart = fromStartLen(len, ...strings);\n\n  if(fromStart >= len / 2) {\n    return strings.map(s => remove(s, fromStart));\n  }\n\n  fromEnd = fromEndLen(len, ...strings);\n\n  if(fromStart >= fromEnd) {\n    return strings.map(s => remove(s, fromStart));\n  } else {\n    return strings.map(s => remove(s, -fromEnd));\n  }\n}\n\n/**\n * Returns the longest matching sequence of characters in the string.\n *\n * @param {Array<string>} strings The list of strings to match.\n * @returns {string}\n */\nexport function shared(...strings: Array<string>) {\n  strings = strings.filter(s => s != null);\n  let len = Math.min.apply(null, strings.map(s => s.length));\n  let fromStart = 0;\n  let fromEnd = 0;\n\n  if(strings.length == 0) {\n    return '';\n  }\n  if(strings.length == 1) {\n    return strings[0];\n  }\n\n  fromStart = fromStartLen(len, ...strings);\n\n  if(fromStart >= len / 2) {\n    return strings[0].substring(0, fromStart);\n  }\n\n  fromEnd = fromEndLen(len, ...strings);\n\n  if(fromStart >= fromEnd) {\n    return strings[0].substring(0, fromStart);\n  } else {\n    let s = strings[0];\n    return s.substring(s.length - fromEnd);\n  }\n}","function currentYPosition() {\n  // Firefox, Chrome, Opera, Safari\n  if (self.pageYOffset) return self.pageYOffset;\n  // Internet Explorer 6 - standards mode\n  if (document.documentElement && document.documentElement.scrollTop)\n    return document.documentElement.scrollTop;\n  // Internet Explorer 6, 7 and 8\n  if (document.body.scrollTop) return document.body.scrollTop;\n  return 0;\n}\n\n\nfunction elmYPosition(elm) {\n  var y = elm.offsetTop;\n  var node = elm;\n  while (node.offsetParent && node.offsetParent != document.body) {\n    node = node.offsetParent;\n    y += node.offsetTop;\n  } return y;\n}\n\n\nexport function smoothScroll(elm) {\n  var startY = currentYPosition();\n  var stopY = elmYPosition(elm);\n  var distance = stopY > startY ? stopY - startY : startY - stopY;\n  if (distance < 100) {\n    scrollTo(0, stopY); return 0;\n  }\n  var speed = Math.round(distance / 100);\n  if (speed >= 20) speed = 20;\n  var step = Math.round(distance / 25);\n  var leapY = stopY > startY ? startY + step : startY - step;\n  var timer = 0;\n  var duration = 0;\n  if (stopY > startY) {\n    for ( var i=startY; i<stopY; i+=step ) {\n      setTimeout(\"window.scrollTo(0, \"+leapY+\")\", timer * speed);\n      leapY += step; if (leapY > stopY) leapY = stopY; timer++;\n      duration = timer * speed;\n    } return duration;\n  }\n  for ( var i=startY; i>stopY; i-=step ) {\n    setTimeout(\"window.scrollTo(0, \"+leapY+\")\", timer * speed);\n    leapY -= step; if (leapY < stopY) leapY = stopY; timer++;\n    duration = timer * speed;\n  }\n  return duration;\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}